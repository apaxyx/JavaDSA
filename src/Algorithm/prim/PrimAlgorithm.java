package Algorithm.prim;

/*
普里姆算法

1.有7个村庄（A,B,C,D,E,F,G）,现在需要修路把7个村庄都连通
2.各个村庄的距离用边线表示（权），比如A-B距离5公里
3.问：如何修路保证各个村庄都能连通，并且总的修建公路总里程最短？

思路：将10条边，连接即可，但是总的里程数不是最小
正确的思路：就是尽可能的选择少的路线，并且每条路线最小，保证总里程数最少

最小生成树
修路问题本质就是最小生成树问题，
先介绍一下最小生成树（Minimum Cost Spanning Tree）,简称MST
1.给定一个带权的无向连通图，如何选取一棵生成树，使树上的所有边上权的总
和为最小，这叫最小生成树
2.N个顶点，一定有N-1条边
3.包含全部顶点
4.N-1条边都在图中
5.举例说明
6.求最小生成树的算法主要是普里姆算法和克鲁斯卡尔算法

普里姆算法介绍
1.普利姆（Prim）算法求最小生成树，也就是包含n个顶点的连通图中，找出只有
（n-1）条边包含所有n个顶点的连通子图，也就是所谓的极小连通子图
2.普利姆的算法如下：
一：设G=(V,E)是连通图，T=(U,D)是最小生成树，V,U是顶点集合，E,D是边的集合
二：若从顶点u开始构造最小生成树，则从集合V中取出顶点u放入集合U中，标记顶点v
的visited[u]=1
三：若集合U中顶点ui与集合V-U中的顶vj之间存在边，则寻找这些边中权值最小的边，但
不能构成回路，将顶点vj加入集合U中，将边(ui,vj)加入集合D中，标记visited[vj]=1
四：重复步骤二，直到U与V相等，即所有顶点都被标记为访问过，此时D中有n-1条边
五：提示：单独看步骤很难理，通过代码来理解
 */
public class PrimAlgorithm {
    public static void main(String[] args) {
        //测试看看图是否创建OK
        char[] data = new char[]{'A', 'B', 'C', 'D', 'E', 'F', 'G'};
        int verxs = data.length;
        //邻接矩阵的关系使用二维数组表示，用10000这个大数，表示两个点不连通
        int[][] weight = new int[][]{
                {10000, 5, 7, 10000, 10000, 10000, 2},
                {5, 10000, 10000, 9, 10000, 10000, 3},
                {7, 10000, 10000, 10000, 8, 10000, 10000},
                {10000, 9, 10000, 10000, 10000, 4, 10000},
                {10000, 10000, 8, 10000, 10000, 5, 4},
                {10000, 10000, 10000, 4, 5, 10000, 6},
                {2, 3, 10000, 10000, 4, 6, 10000}};

        //创建MGraph对象
        MGraph graph = new MGraph(verxs);
        //创建一个MinTree对象
        MinTree minTree = new MinTree();
        minTree.createGraph(graph, verxs, data, weight);
        //输出
        minTree.showGraph(graph);
        //测试普利姆算法
        for (int i = 0; i < data.length; i++) {
            minTree.prim(graph,i);
            System.out.println();
        }
        //minTree.prim(graph, 6);

    }
}
